/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
*/

buildscript {
    ext.kotlin_version = "1.3.20"
    ext.jcommander_version = "1.72"
    
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'

group 'com.thelastpickle'
version '1.0-SNAPSHOT'
mainClassName = "com.thelastpickle.tlpcluster.MainKt"
sourceCompatibility = 1.8


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
//    jcenter()
    mavenCentral()

}


jar {
    manifest {
        attributes 'Main-Class': 'com.thelastpickle.tlpcluster.MainKt'
    }
    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    baseName = "tlp-cluster"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}


// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-stdlib
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version


    compile group: 'com.beust', name: 'jcommander', version: jcommander_version
    compile 'com.google.guava:guava:27.0-jre'

    // for finding resources
    // https://mvnrepository.com/artifact/org.reflections/reflections
    compile group: 'org.reflections', name: 'reflections', version: '0.9.11'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    // https://mvnrepository.com/artifact/com.github.docker-java/docker-java
    //compile group: 'com.github.docker-java', name: 'docker-java', version: '3.1.0-rc-5'

    compile 'com.spotify:docker-client:8.14.3'

    // https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
    compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.1.3.201810200350-r'

    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.0'
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine

    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'

    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.11.1'

}




compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs = ["-Xallow-result-return-type"]


}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs = ["-Xallow-result-return-type"]
}



sourceSets {
    main.java.srcDirs += "src/main/kotlin"
    test.java.srcDirs += "src/test/kotlin"
}

test {
    useJUnitPlatform()
}